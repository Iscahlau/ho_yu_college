"use strict";
/**
 * Test DynamoDB Local Connection and Operations
 * Verifies that local DynamoDB is working properly with basic CRUD operations
 */
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv = require("dotenv");
dotenv.config();
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
// Configuration for local DynamoDB
const client = new client_dynamodb_1.DynamoDBClient({
    region: process.env.AWS_REGION || 'us-east-1',
    endpoint: process.env.DYNAMODB_ENDPOINT || 'http://localhost:8002',
    credentials: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID || 'local',
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || 'local',
    },
});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
const STUDENTS_TABLE = process.env.STUDENTS_TABLE_NAME || 'ho-yu-students';
const results = [];
/**
 * Test: Create (PUT) Operation
 */
async function testCreate() {
    try {
        const testStudent = {
            student_id: 'TEST_STUDENT_001',
            name_1: 'Test Student',
            name_2: '測試學生',
            marks: 100,
            class: 'TEST',
            class_no: '01',
            teacher_id: 'TCH001',
            password: '123',
            last_login: new Date().toISOString(),
            last_update: new Date().toISOString(),
        };
        const command = new lib_dynamodb_1.PutCommand({
            TableName: STUDENTS_TABLE,
            Item: testStudent,
        });
        await docClient.send(command);
        return {
            test: 'CREATE',
            status: 'PASS',
            message: 'Successfully created test student',
        };
    }
    catch (error) {
        return {
            test: 'CREATE',
            status: 'FAIL',
            message: error.message,
        };
    }
}
/**
 * Test: Read (GET) Operation
 */
async function testRead() {
    try {
        const command = new lib_dynamodb_1.GetCommand({
            TableName: STUDENTS_TABLE,
            Key: { student_id: 'TEST_STUDENT_001' },
        });
        const result = await docClient.send(command);
        if (result.Item && result.Item.student_id === 'TEST_STUDENT_001') {
            return {
                test: 'READ',
                status: 'PASS',
                message: 'Successfully read test student',
            };
        }
        else {
            return {
                test: 'READ',
                status: 'FAIL',
                message: 'Student not found or data mismatch',
            };
        }
    }
    catch (error) {
        return {
            test: 'READ',
            status: 'FAIL',
            message: error.message,
        };
    }
}
/**
 * Test: Update (UPDATE) Operation
 */
async function testUpdate() {
    try {
        const command = new lib_dynamodb_1.UpdateCommand({
            TableName: STUDENTS_TABLE,
            Key: { student_id: 'TEST_STUDENT_001' },
            UpdateExpression: 'SET marks = :marks',
            ExpressionAttributeValues: {
                ':marks': 200,
            },
            ReturnValues: 'ALL_NEW',
        });
        const result = await docClient.send(command);
        if (result.Attributes && result.Attributes.marks === 200) {
            return {
                test: 'UPDATE',
                status: 'PASS',
                message: 'Successfully updated test student marks',
            };
        }
        else {
            return {
                test: 'UPDATE',
                status: 'FAIL',
                message: 'Update did not reflect expected changes',
            };
        }
    }
    catch (error) {
        return {
            test: 'UPDATE',
            status: 'FAIL',
            message: error.message,
        };
    }
}
/**
 * Test: Delete (DELETE) Operation
 */
async function testDelete() {
    try {
        const command = new lib_dynamodb_1.DeleteCommand({
            TableName: STUDENTS_TABLE,
            Key: { student_id: 'TEST_STUDENT_001' },
        });
        await docClient.send(command);
        // Verify deletion
        const getCommand = new lib_dynamodb_1.GetCommand({
            TableName: STUDENTS_TABLE,
            Key: { student_id: 'TEST_STUDENT_001' },
        });
        const result = await docClient.send(getCommand);
        if (!result.Item) {
            return {
                test: 'DELETE',
                status: 'PASS',
                message: 'Successfully deleted test student',
            };
        }
        else {
            return {
                test: 'DELETE',
                status: 'FAIL',
                message: 'Student still exists after deletion',
            };
        }
    }
    catch (error) {
        return {
            test: 'DELETE',
            status: 'FAIL',
            message: error.message,
        };
    }
}
/**
 * Test: Scan Operation
 */
async function testScan() {
    try {
        const command = new lib_dynamodb_1.ScanCommand({
            TableName: STUDENTS_TABLE,
            Limit: 5,
        });
        const result = await docClient.send(command);
        if (result.Items && result.Items.length > 0) {
            return {
                test: 'SCAN',
                status: 'PASS',
                message: `Successfully scanned table (${result.Items.length} items found)`,
            };
        }
        else {
            return {
                test: 'SCAN',
                status: 'FAIL',
                message: 'No items found in table (may need to seed data)',
            };
        }
    }
    catch (error) {
        return {
            test: 'SCAN',
            status: 'FAIL',
            message: error.message,
        };
    }
}
/**
 * Run all tests
 */
async function runTests() {
    console.log('╔════════════════════════════════════════════════════════════╗');
    console.log('║       DynamoDB Local Connection Test Suite                ║');
    console.log('╚════════════════════════════════════════════════════════════╝\n');
    console.log('Configuration:');
    console.log(`  Endpoint: ${process.env.DYNAMODB_ENDPOINT || 'http://localhost:8002'}`);
    console.log(`  Region: ${process.env.AWS_REGION || 'us-east-1'}`);
    console.log(`  Mode: ${process.env.DYNAMODB_MODE || 'aws'}`);
    console.log(`  Table: ${STUDENTS_TABLE}\n`);
    console.log('Running tests...\n');
    // Run tests sequentially
    results.push(await testCreate());
    results.push(await testRead());
    results.push(await testUpdate());
    results.push(await testDelete());
    results.push(await testScan());
    // Print results
    console.log('Test Results:');
    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n');
    results.forEach((result) => {
        const statusIcon = result.status === 'PASS' ? '✓' : '✗';
        const statusColor = result.status === 'PASS' ? '✓' : '✗';
        console.log(`  ${statusColor} ${result.test.padEnd(10)} ${result.status}`);
        if (result.message) {
            console.log(`    └─ ${result.message}`);
        }
    });
    console.log('\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
    // Summary
    const passCount = results.filter((r) => r.status === 'PASS').length;
    const failCount = results.filter((r) => r.status === 'FAIL').length;
    console.log(`\nSummary: ${passCount} passed, ${failCount} failed out of ${results.length} tests\n`);
    if (failCount === 0) {
        console.log('✓ All tests passed! DynamoDB Local is working correctly.\n');
        process.exit(0);
    }
    else {
        console.log('✗ Some tests failed. Check configuration and DynamoDB Local status.\n');
        console.log('Troubleshooting:');
        console.log('  1. Ensure DynamoDB Local is running: npm run dynamodb:start');
        console.log('  2. Verify tables are created: npm run dynamodb:init');
        console.log('  3. Check environment variables in .env file');
        console.log('  4. Verify Docker containers: docker ps');
        console.log('  5. Check logs: npm run dynamodb:logs\n');
        process.exit(1);
    }
}
// Run tests
runTests().catch((error) => {
    console.error('Fatal error running tests:', error);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,