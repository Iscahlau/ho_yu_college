"use strict";
/**
 * Seed DynamoDB Local with Mock Data
 * Populates tables with test data from mock files
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
// Import mock data
const students_1 = require("../test/mocks/students");
const teachers_1 = require("../test/mocks/teachers");
const games_1 = require("../test/mocks/games");
// Configuration for local DynamoDB
const client = new client_dynamodb_1.DynamoDBClient({
    region: process.env.AWS_REGION || 'us-east-1',
    endpoint: process.env.DYNAMODB_ENDPOINT || 'http://localhost:8002',
    credentials: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID || 'local',
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || 'local',
    },
});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
const TABLE_NAMES = {
    students: process.env.STUDENTS_TABLE_NAME || 'ho-yu-students',
    teachers: process.env.TEACHERS_TABLE_NAME || 'ho-yu-teachers',
    games: process.env.GAMES_TABLE_NAME || 'ho-yu-games',
};
/**
 * Seed data in batches (DynamoDB batch write limit is 25 items)
 */
async function seedInBatches(tableName, items, label) {
    const batchSize = 25;
    const batches = [];
    for (let i = 0; i < items.length; i += batchSize) {
        batches.push(items.slice(i, i + batchSize));
    }
    console.log(`Seeding ${items.length} ${label} in ${batches.length} batch(es)...`);
    for (let i = 0; i < batches.length; i++) {
        const batch = batches[i];
        const putRequests = batch.map(item => ({
            PutRequest: {
                Item: item,
            },
        }));
        const command = new lib_dynamodb_1.BatchWriteCommand({
            RequestItems: {
                [tableName]: putRequests,
            },
        });
        await docClient.send(command);
        console.log(`  ✓ Batch ${i + 1}/${batches.length} completed (${batch.length} items)`);
    }
    console.log(`✓ Seeded ${items.length} ${label}`);
}
/**
 * Main function to seed all tables
 */
async function seedTables() {
    try {
        console.log('Seeding DynamoDB Local with mock data...\n');
        // Seed teachers
        await seedInBatches(TABLE_NAMES.teachers, teachers_1.mockTeachers, 'teachers');
        console.log('');
        // Seed students
        await seedInBatches(TABLE_NAMES.students, students_1.mockStudents, 'students');
        console.log('');
        // Seed games
        await seedInBatches(TABLE_NAMES.games, games_1.mockGames, 'games');
        console.log('');
        console.log('✓ All data seeded successfully!\n');
        console.log('Summary:');
        console.log(`  - Teachers: ${teachers_1.mockTeachers.length}`);
        console.log(`  - Students: ${students_1.mockStudents.length}`);
        console.log(`  - Games: ${games_1.mockGames.length}`);
        console.log('\nYou can now:');
        console.log('  1. View data in DynamoDB Admin: http://localhost:8001');
        console.log('  2. Test your Lambda functions with local data');
        console.log('  3. Run integration tests\n');
    }
    catch (error) {
        console.error('Error seeding tables:', error);
        throw error;
    }
}
// Run seeding
seedTables()
    .then(() => process.exit(0))
    .catch((error) => {
    console.error('Failed to seed tables:', error);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,