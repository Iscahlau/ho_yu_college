"use strict";
/**
 * Mock Data Validation Tests
 * Ensures mock data conforms to the expected schema
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mocks_1 = require("./mocks");
describe('Mock Students Data', () => {
    test('should have exactly 10 student records', () => {
        expect(mocks_1.mockStudents).toHaveLength(10);
    });
    test('all students should have required fields', () => {
        mocks_1.mockStudents.forEach((student) => {
            expect(student).toHaveProperty('student_id');
            expect(student).toHaveProperty('name_1');
            expect(student).toHaveProperty('name_2');
            expect(student).toHaveProperty('marks');
            expect(student).toHaveProperty('class');
            expect(student).toHaveProperty('class_no');
            expect(student).toHaveProperty('last_login');
            expect(student).toHaveProperty('last_update');
            expect(student).toHaveProperty('teacher_id');
            expect(student).toHaveProperty('password');
        });
    });
    test('student IDs should follow STU### pattern', () => {
        mocks_1.mockStudents.forEach((student) => {
            expect(student.student_id).toMatch(/^STU\d{3}$/);
        });
    });
    test('student IDs should be unique', () => {
        const ids = mocks_1.mockStudents.map((s) => s.student_id);
        const uniqueIds = new Set(ids);
        expect(uniqueIds.size).toBe(mocks_1.mockStudents.length);
    });
    test('marks should be between 0 and 1000', () => {
        mocks_1.mockStudents.forEach((student) => {
            expect(student.marks).toBeGreaterThanOrEqual(0);
            expect(student.marks).toBeLessThanOrEqual(1000);
        });
    });
    test('class should be valid format (e.g., 1A, 2B)', () => {
        const validClasses = ['1A', '1B', '2A', '2B'];
        mocks_1.mockStudents.forEach((student) => {
            expect(validClasses).toContain(student.class);
        });
    });
    test('class_no should be two-digit format', () => {
        mocks_1.mockStudents.forEach((student) => {
            expect(student.class_no).toMatch(/^\d{2}$/);
        });
    });
    test('teacher_id should follow TCH### pattern', () => {
        mocks_1.mockStudents.forEach((student) => {
            expect(student.teacher_id).toMatch(/^TCH\d{3}$/);
        });
    });
    test('last_login and last_update should be valid ISO date strings', () => {
        mocks_1.mockStudents.forEach((student) => {
            expect(new Date(student.last_login).toISOString()).toBe(student.last_login);
            expect(new Date(student.last_update).toISOString()).toBe(student.last_update);
        });
    });
    test('passwords should be properly hashed', () => {
        mocks_1.mockStudents.forEach((student) => {
            expect(student.password).toHaveLength(64); // SHA-256 produces 64 hex characters
            expect(student.password).toBe(mocks_1.MOCK_STUDENT_PASSWORD_HASH);
        });
    });
});
describe('Mock Teachers Data', () => {
    test('should have exactly 3 teacher records', () => {
        expect(mocks_1.mockTeachers).toHaveLength(3);
    });
    test('all teachers should have required fields', () => {
        mocks_1.mockTeachers.forEach((teacher) => {
            expect(teacher).toHaveProperty('teacher_id');
            expect(teacher).toHaveProperty('password');
            expect(teacher).toHaveProperty('responsible_class');
            expect(teacher).toHaveProperty('last_login');
            expect(teacher).toHaveProperty('is_admin');
        });
    });
    test('teacher IDs should follow TCH### pattern', () => {
        mocks_1.mockTeachers.forEach((teacher) => {
            expect(teacher.teacher_id).toMatch(/^TCH\d{3}$/);
        });
    });
    test('teacher IDs should be unique', () => {
        const ids = mocks_1.mockTeachers.map((t) => t.teacher_id);
        const uniqueIds = new Set(ids);
        expect(uniqueIds.size).toBe(mocks_1.mockTeachers.length);
    });
    test('responsible_class should be an array', () => {
        mocks_1.mockTeachers.forEach((teacher) => {
            expect(Array.isArray(teacher.responsible_class)).toBe(true);
            expect(teacher.responsible_class.length).toBeGreaterThan(0);
        });
    });
    test('is_admin should be a boolean', () => {
        mocks_1.mockTeachers.forEach((teacher) => {
            expect(typeof teacher.is_admin).toBe('boolean');
        });
    });
    test('at least one teacher should be an admin', () => {
        const adminTeachers = mocks_1.mockTeachers.filter((t) => t.is_admin);
        expect(adminTeachers.length).toBeGreaterThan(0);
    });
    test('last_login should be valid ISO date string', () => {
        mocks_1.mockTeachers.forEach((teacher) => {
            expect(new Date(teacher.last_login).toISOString()).toBe(teacher.last_login);
        });
    });
    test('passwords should be properly hashed', () => {
        mocks_1.mockTeachers.forEach((teacher) => {
            expect(teacher.password).toHaveLength(64); // SHA-256 produces 64 hex characters
            // Check if password is either teacher or admin hash
            const validHashes = [mocks_1.MOCK_TEACHER_PASSWORD_HASH, mocks_1.MOCK_ADMIN_PASSWORD_HASH];
            expect(validHashes).toContain(teacher.password);
        });
    });
});
describe('Mock Games Data', () => {
    test('should have exactly 20 game records', () => {
        expect(mocks_1.mockGames).toHaveLength(20);
    });
    test('all games should have required fields', () => {
        mocks_1.mockGames.forEach((game) => {
            expect(game).toHaveProperty('game_id');
            expect(game).toHaveProperty('game_name');
            expect(game).toHaveProperty('student_id');
            expect(game).toHaveProperty('subject');
            expect(game).toHaveProperty('difficulty');
            expect(game).toHaveProperty('teacher_id');
            expect(game).toHaveProperty('last_update');
            expect(game).toHaveProperty('scratch_id');
            expect(game).toHaveProperty('scratch_api');
            expect(game).toHaveProperty('accumulated_click');
        });
    });
    test('game IDs should be numeric strings', () => {
        mocks_1.mockGames.forEach((game) => {
            expect(game.game_id).toMatch(/^\d+$/);
        });
    });
    test('game IDs should be unique', () => {
        const ids = mocks_1.mockGames.map((g) => g.game_id);
        const uniqueIds = new Set(ids);
        expect(uniqueIds.size).toBe(mocks_1.mockGames.length);
    });
    test('subject should be one of the valid values', () => {
        const validSubjects = [
            'Chinese Language',
            'English Language',
            'Mathematics',
            'Humanities and Science',
        ];
        mocks_1.mockGames.forEach((game) => {
            expect(validSubjects).toContain(game.subject);
        });
    });
    test('difficulty should be one of the valid values', () => {
        const validDifficulties = ['Beginner', 'Intermediate', 'Advanced'];
        mocks_1.mockGames.forEach((game) => {
            expect(validDifficulties).toContain(game.difficulty);
        });
    });
    test('student_id should follow STU### pattern', () => {
        mocks_1.mockGames.forEach((game) => {
            expect(game.student_id).toMatch(/^STU\d{3}$/);
        });
    });
    test('teacher_id should follow TCH### pattern', () => {
        mocks_1.mockGames.forEach((game) => {
            expect(game.teacher_id).toMatch(/^TCH\d{3}$/);
        });
    });
    test('accumulated_click should be non-negative', () => {
        mocks_1.mockGames.forEach((game) => {
            expect(game.accumulated_click).toBeGreaterThanOrEqual(0);
        });
    });
    test('scratch_id should be numeric string', () => {
        mocks_1.mockGames.forEach((game) => {
            expect(game.scratch_id).toMatch(/^\d+$/);
        });
    });
    test('scratch_api should be valid Scratch project URL', () => {
        mocks_1.mockGames.forEach((game) => {
            expect(game.scratch_api).toMatch(/^https:\/\/scratch\.mit\.edu\/projects\/\d+$/);
        });
    });
    test('game_id must match the last segment of scratch_api URL', () => {
        mocks_1.mockGames.forEach((game) => {
            const urlParts = game.scratch_api.split('/');
            const projectId = urlParts[urlParts.length - 1];
            expect(game.game_id).toBe(projectId);
        });
    });
    test('last_update should be valid ISO date string', () => {
        mocks_1.mockGames.forEach((game) => {
            expect(new Date(game.last_update).toISOString()).toBe(game.last_update);
        });
    });
    test('all subjects should be represented', () => {
        const subjects = mocks_1.mockGames.map((g) => g.subject);
        expect(subjects).toContain('Chinese Language');
        expect(subjects).toContain('English Language');
        expect(subjects).toContain('Mathematics');
        expect(subjects).toContain('Humanities and Science');
    });
    test('all difficulty levels should be represented', () => {
        const difficulties = mocks_1.mockGames.map((g) => g.difficulty);
        expect(difficulties).toContain('Beginner');
        expect(difficulties).toContain('Intermediate');
        expect(difficulties).toContain('Advanced');
    });
});
describe('Mock Data Relationships', () => {
    test('all student_ids in games should exist in students', () => {
        const studentIds = mocks_1.mockStudents.map((s) => s.student_id);
        mocks_1.mockGames.forEach((game) => {
            expect(studentIds).toContain(game.student_id);
        });
    });
    test('all teacher_ids in students should exist in teachers', () => {
        const teacherIds = mocks_1.mockTeachers.map((t) => t.teacher_id);
        mocks_1.mockStudents.forEach((student) => {
            expect(teacherIds).toContain(student.teacher_id);
        });
    });
    test('all teacher_ids in games should exist in teachers', () => {
        const teacherIds = mocks_1.mockTeachers.map((t) => t.teacher_id);
        mocks_1.mockGames.forEach((game) => {
            expect(teacherIds).toContain(game.teacher_id);
        });
    });
    test('each student should have at least one game', () => {
        mocks_1.mockStudents.forEach((student) => {
            const studentGames = mocks_1.mockGames.filter((g) => g.student_id === student.student_id);
            expect(studentGames.length).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,