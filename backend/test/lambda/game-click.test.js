"use strict";
/**
 * Game Click Lambda Function Tests
 * Unit tests for game click increment logic
 */
Object.defineProperty(exports, "__esModule", { value: true });
const click_1 = require("../../lambda/games/click");
const mocks_1 = require("../mocks");
// Store click counts in memory for testing - outside the mock to share across tests
const clickCounts = new Map();
// Mock AWS SDK
jest.mock('@aws-sdk/client-dynamodb');
jest.mock('@aws-sdk/lib-dynamodb', () => {
    return {
        DynamoDBDocumentClient: {
            from: jest.fn(() => ({
                send: jest.fn((command) => {
                    const { mockGames } = require('../mocks');
                    // Handle GetCommand - check if game exists
                    if (command.input?.TableName && command.input?.Key?.game_id) {
                        const gameId = command.input.Key.game_id;
                        const game = mockGames.find((g) => g.game_id === gameId);
                        // If UpdateExpression is present, it's an UpdateCommand
                        if (command.input.UpdateExpression) {
                            if (!game) {
                                return Promise.resolve({ Attributes: undefined });
                            }
                            // Simulate atomic ADD operation
                            const currentCount = clickCounts.get(gameId) || game.accumulated_click;
                            const newCount = currentCount + 1;
                            clickCounts.set(gameId, newCount);
                            return Promise.resolve({
                                Attributes: {
                                    ...game,
                                    accumulated_click: newCount,
                                },
                            });
                        }
                        // It's a GetCommand
                        return Promise.resolve({ Item: game });
                    }
                    return Promise.resolve({ Item: undefined });
                }),
            })),
        },
        GetCommand: jest.fn((input) => ({ input })),
        UpdateCommand: jest.fn((input) => ({ input })),
    };
});
// Set environment variables
process.env.GAMES_TABLE_NAME = 'ho-yu-games';
describe('Game Click Lambda Handler', () => {
    // Reset click counts before each test
    beforeEach(() => {
        clickCounts.clear();
        // Initialize with mock data
        mocks_1.mockGames.forEach((game) => {
            clickCounts.set(game.game_id, game.accumulated_click);
        });
    });
    const createEvent = (gameId) => ({
        body: null,
        headers: {},
        multiValueHeaders: {},
        httpMethod: 'POST',
        isBase64Encoded: false,
        path: `/games/${gameId}/click`,
        pathParameters: gameId ? { gameId } : null,
        queryStringParameters: null,
        multiValueQueryStringParameters: null,
        stageVariables: null,
        requestContext: {},
        resource: '',
    });
    describe('Input Validation', () => {
        test('should return 400 if gameId is missing', async () => {
            const event = createEvent(null);
            const result = await (0, click_1.handler)(event);
            expect(result.statusCode).toBe(400);
            expect(JSON.parse(result.body)).toEqual({ message: 'Missing gameId parameter' });
        });
    });
    describe('Game Existence Check', () => {
        test('should return 404 if game does not exist', async () => {
            const event = createEvent('nonexistent-game-id');
            const result = await (0, click_1.handler)(event);
            expect(result.statusCode).toBe(404);
            expect(JSON.parse(result.body)).toEqual({ message: 'Game not found' });
        });
    });
    describe('Click Increment', () => {
        test('should successfully increment click count for existing game', async () => {
            const game = mocks_1.mockGames[0];
            const event = createEvent(game.game_id);
            const result = await (0, click_1.handler)(event);
            expect(result.statusCode).toBe(200);
            const body = JSON.parse(result.body);
            expect(body.success).toBe(true);
            expect(body.accumulated_click).toBe(game.accumulated_click + 1);
        });
        test('should increment click count multiple times', async () => {
            const game = mocks_1.mockGames[1];
            const initialCount = game.accumulated_click;
            // First increment
            let event = createEvent(game.game_id);
            let result = await (0, click_1.handler)(event);
            let body = JSON.parse(result.body);
            expect(body.accumulated_click).toBe(initialCount + 1);
            // Second increment
            event = createEvent(game.game_id);
            result = await (0, click_1.handler)(event);
            body = JSON.parse(result.body);
            expect(body.accumulated_click).toBe(initialCount + 2);
            // Third increment
            event = createEvent(game.game_id);
            result = await (0, click_1.handler)(event);
            body = JSON.parse(result.body);
            expect(body.accumulated_click).toBe(initialCount + 3);
        });
        test('should work for different games independently', async () => {
            const game1 = mocks_1.mockGames[0];
            const game2 = mocks_1.mockGames[1];
            const initialCount1 = game1.accumulated_click;
            const initialCount2 = game2.accumulated_click;
            // Increment game 1
            let event = createEvent(game1.game_id);
            let result = await (0, click_1.handler)(event);
            let body = JSON.parse(result.body);
            expect(body.accumulated_click).toBe(initialCount1 + 1);
            // Increment game 2
            event = createEvent(game2.game_id);
            result = await (0, click_1.handler)(event);
            body = JSON.parse(result.body);
            expect(body.accumulated_click).toBe(initialCount2 + 1);
            // Increment game 1 again - should be independent
            event = createEvent(game1.game_id);
            result = await (0, click_1.handler)(event);
            body = JSON.parse(result.body);
            expect(body.accumulated_click).toBe(initialCount1 + 2);
        });
        test('should work with all mock games', async () => {
            // Test a few random games to ensure it works across the board
            const testGames = [mocks_1.mockGames[2], mocks_1.mockGames[5], mocks_1.mockGames[10], mocks_1.mockGames[15]];
            for (const game of testGames) {
                const event = createEvent(game.game_id);
                const result = await (0, click_1.handler)(event);
                expect(result.statusCode).toBe(200);
                const body = JSON.parse(result.body);
                expect(body.success).toBe(true);
                expect(body.accumulated_click).toBeGreaterThan(game.accumulated_click);
            }
        });
    });
    describe('Response Headers', () => {
        test('should include CORS headers in successful response', async () => {
            const game = mocks_1.mockGames[0];
            const event = createEvent(game.game_id);
            const result = await (0, click_1.handler)(event);
            expect(result.headers).toBeDefined();
            expect(result.headers['Content-Type']).toBe('application/json');
            expect(result.headers['Access-Control-Allow-Origin']).toBe('*');
        });
        test('should include CORS headers in error response', async () => {
            const event = createEvent('nonexistent-game');
            const result = await (0, click_1.handler)(event);
            expect(result.headers).toBeDefined();
            expect(result.headers['Content-Type']).toBe('application/json');
            expect(result.headers['Access-Control-Allow-Origin']).toBe('*');
        });
    });
    describe('Concurrent Clicks Simulation', () => {
        test('should handle rapid sequential clicks correctly', async () => {
            const game = mocks_1.mockGames[3];
            const initialCount = game.accumulated_click;
            const numClicks = 10;
            // Simulate rapid clicks
            for (let i = 0; i < numClicks; i++) {
                const event = createEvent(game.game_id);
                const result = await (0, click_1.handler)(event);
                expect(result.statusCode).toBe(200);
            }
            // Verify final count
            const event = createEvent(game.game_id);
            const result = await (0, click_1.handler)(event);
            const body = JSON.parse(result.body);
            // Should have incremented by numClicks + 1 (for the final verification call)
            expect(body.accumulated_click).toBe(initialCount + numClicks + 1);
        });
    });
    describe('Response Format', () => {
        test('should return success flag and click count', async () => {
            const game = mocks_1.mockGames[0];
            const event = createEvent(game.game_id);
            const result = await (0, click_1.handler)(event);
            const body = JSON.parse(result.body);
            expect(body).toHaveProperty('success');
            expect(body).toHaveProperty('accumulated_click');
            expect(typeof body.success).toBe('boolean');
            expect(typeof body.accumulated_click).toBe('number');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,