"use strict";
/**
 * Auth Lambda Handler - Login functionality
 * Handles student and teacher authentication
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
// Create DynamoDB client
const mode = process.env.DYNAMODB_MODE || 'aws';
const clientConfig = {
    region: process.env.AWS_REGION || 'us-east-1',
};
if (mode === 'local') {
    const endpoint = process.env.DYNAMODB_ENDPOINT || 'http://localhost:8002';
    clientConfig.endpoint = endpoint;
    clientConfig.credentials = {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID || 'local',
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || 'local',
    };
    console.log(`[DynamoDB] Connecting to local DynamoDB at ${endpoint}`);
}
const client = new client_dynamodb_1.DynamoDBClient(clientConfig);
const dynamoDBClient = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
const tableNames = {
    students: process.env.STUDENTS_TABLE_NAME || 'ho-yu-students',
    teachers: process.env.TEACHERS_TABLE_NAME || 'ho-yu-teachers',
    games: process.env.GAMES_TABLE_NAME || 'ho-yu-games',
};
const handler = async (event) => {
    try {
        const body = JSON.parse(event.body || '{}');
        const { id, password } = body;
        if (!id || !password) {
            return {
                statusCode: 400,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                },
                body: JSON.stringify({ message: 'Missing id or password' }),
            };
        }
        // Try to find student first
        let user = await getStudent(id);
        let role = 'student';
        // If not found, try teacher
        if (!user) {
            user = await getTeacher(id);
            if (user) {
                role = user.is_admin ? 'admin' : 'teacher';
            }
        }
        // Verify user exists and password matches (plain text comparison)
        if (!user || user.password !== password) {
            return {
                statusCode: 401,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                },
                body: JSON.stringify({ message: 'Invalid credentials' }),
            };
        }
        // Update last login timestamp
        await updateLastLogin(id, role);
        // Remove password from response
        const { password: _, ...userWithoutPassword } = user;
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
            },
            body: JSON.stringify({
                success: true,
                user: userWithoutPassword,
                role,
            }),
        };
    }
    catch (error) {
        console.error('Error:', error);
        return {
            statusCode: 500,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
            },
            body: JSON.stringify({ message: 'Internal server error' }),
        };
    }
};
exports.handler = handler;
async function getStudent(studentId) {
    const command = new lib_dynamodb_1.GetCommand({
        TableName: tableNames.students,
        Key: { student_id: studentId },
    });
    const result = await dynamoDBClient.send(command);
    return result.Item;
}
async function getTeacher(teacherId) {
    const command = new lib_dynamodb_1.GetCommand({
        TableName: tableNames.teachers,
        Key: { teacher_id: teacherId },
    });
    const result = await dynamoDBClient.send(command);
    return result.Item;
}
async function updateLastLogin(id, role) {
    // Implementation would update the last_login timestamp
    // This is a placeholder for the actual implementation
    console.log(`Updating last login for ${role} ${id}`);
}
//# sourceMappingURL=data:application/json;base64,