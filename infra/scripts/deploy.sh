#!/bin/bash

# Deploy script for Ho Yu College Platform
# This script handles the complete deployment process:
# 1. Build and deploy backend infrastructure (CDK)
# 2. Capture API Gateway endpoint
# 3. Create frontend .env file with API endpoint
# 4. Build frontend with environment variables
# 5. Sync frontend build to S3
# 6. Invalidate CloudFront cache

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}â„¹ ${NC}$1"
}

log_success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

log_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Check if running from correct directory
if [ ! -f "cdk.json" ]; then
    log_error "This script must be run from the infra/ directory"
    exit 1
fi

# Get project root
PROJECT_ROOT="$(cd .. && pwd)"
INFRA_DIR="$PROJECT_ROOT/infra"
BACKEND_DIR="$PROJECT_ROOT/backend"
FRONTEND_DIR="$PROJECT_ROOT/frontend"
BUILD_OUTPUT="$INFRA_DIR/build"

log_info "Starting deployment process..."
log_info "Project root: $PROJECT_ROOT"

# Step 1: Build backend
log_info "Step 1/6: Building backend..."
cd "$BACKEND_DIR"
if yarn build; then
    log_success "Backend built successfully"
else
    log_error "Backend build failed"
    exit 1
fi

# Step 2: Build and deploy CDK stack
log_info "Step 2/6: Deploying infrastructure with CDK..."
cd "$INFRA_DIR"

# Build CDK
if yarn build; then
    log_success "CDK TypeScript compiled successfully"
else
    log_error "CDK build failed"
    exit 1
fi

# Deploy CDK stack and capture outputs
log_info "Deploying CDK stack (this may take several minutes)..."
if yarn cdk deploy --require-approval never --outputs-file "$BUILD_OUTPUT/cdk-outputs.json"; then
    log_success "Infrastructure deployed successfully"
else
    log_error "CDK deployment failed"
    exit 1
fi

# Step 3: Extract API Gateway endpoint from CDK outputs
log_info "Step 3/6: Extracting API Gateway endpoint..."

if [ ! -f "$BUILD_OUTPUT/cdk-outputs.json" ]; then
    log_error "CDK outputs file not found at $BUILD_OUTPUT/cdk-outputs.json"
    exit 1
fi

# Extract API URL using jq or node
# The stack name is 'ho-yu-college-scratch-platform' and outputs are prefixed with camelCase version
STACK_NAME="ho-yu-college-scratch-platform"
STACK_PREFIX="hoyucollegescratchplatform"

if command -v jq &> /dev/null; then
    API_URL=$(jq -r ".[\"$STACK_NAME\"][\"${STACK_PREFIX}ApiUrl\"]" "$BUILD_OUTPUT/cdk-outputs.json")
    FRONTEND_URL=$(jq -r ".[\"$STACK_NAME\"][\"${STACK_PREFIX}FrontendUrl\"]" "$BUILD_OUTPUT/cdk-outputs.json")
    DISTRIBUTION_ID=$(jq -r ".[\"$STACK_NAME\"][\"${STACK_PREFIX}DistributionId\"]" "$BUILD_OUTPUT/cdk-outputs.json")
    BUCKET_NAME=$(jq -r ".[\"$STACK_NAME\"][\"${STACK_PREFIX}FrontendBucketName\"]" "$BUILD_OUTPUT/cdk-outputs.json")
else
    # Fallback to node if jq not available
    API_URL=$(node -p "JSON.parse(require('fs').readFileSync('$BUILD_OUTPUT/cdk-outputs.json', 'utf8'))['$STACK_NAME']['${STACK_PREFIX}ApiUrl']")
    FRONTEND_URL=$(node -p "JSON.parse(require('fs').readFileSync('$BUILD_OUTPUT/cdk-outputs.json', 'utf8'))['$STACK_NAME']['${STACK_PREFIX}FrontendUrl']")
    DISTRIBUTION_ID=$(node -p "JSON.parse(require('fs').readFileSync('$BUILD_OUTPUT/cdk-outputs.json', 'utf8'))['$STACK_NAME']['${STACK_PREFIX}DistributionId']")
    BUCKET_NAME=$(node -p "JSON.parse(require('fs').readFileSync('$BUILD_OUTPUT/cdk-outputs.json', 'utf8'))['$STACK_NAME']['${STACK_PREFIX}FrontendBucketName']")
fi

if [ -z "$API_URL" ] || [ "$API_URL" == "null" ]; then
    log_error "Failed to extract API URL from CDK outputs"
    exit 1
fi

log_success "API Gateway URL: $API_URL"
log_success "CloudFront URL: $FRONTEND_URL"
log_success "Distribution ID: $DISTRIBUTION_ID"
log_success "S3 Bucket: $BUCKET_NAME"

# Step 4: Create frontend .env file
log_info "Step 4/6: Creating frontend .env file..."
cd "$FRONTEND_DIR"

# Remove any local .env files that might override production settings
log_info "Removing local environment files..."
rm -f .env.local .env.development.local .env.production.local

cat > .env << EOF
# Auto-generated by deploy script on $(date)
# DO NOT EDIT THIS FILE MANUALLY - it will be overwritten on next deployment

# API Gateway endpoint
VITE_API_URL=$API_URL

# CloudFront distribution
VITE_FRONTEND_URL=$FRONTEND_URL
EOF

log_success "Frontend .env file created"
cat .env

# Step 5: Build frontend
log_info "Step 5/6: Building frontend..."
cd "$FRONTEND_DIR"

if yarn build; then
    log_success "Frontend built successfully"
else
    log_error "Frontend build failed"
    exit 1
fi

# Verify build output exists
if [ ! -d "dist" ]; then
    log_error "Frontend build output (dist/) not found"
    exit 1
fi

# Step 6: Sync frontend to S3 and invalidate CloudFront
log_info "Step 6/6: Deploying frontend to S3..."

# Sync to S3
log_info "Uploading files to S3 bucket: $BUCKET_NAME"
if aws s3 sync dist/ "s3://$BUCKET_NAME" --delete --cache-control "public, max-age=31536000" --exclude "index.html"; then
    log_success "Static assets uploaded to S3"
else
    log_error "Failed to upload static assets to S3"
    exit 1
fi

# Upload index.html separately with no-cache to ensure updates are always fetched
if aws s3 cp dist/index.html "s3://$BUCKET_NAME/index.html" --cache-control "no-cache, no-store, must-revalidate"; then
    log_success "index.html uploaded with no-cache policy"
else
    log_error "Failed to upload index.html"
    exit 1
fi

# Invalidate CloudFront cache
log_info "Invalidating CloudFront cache..."
INVALIDATION_ID=$(aws cloudfront create-invalidation \
    --distribution-id "$DISTRIBUTION_ID" \
    --paths "/*" \
    --query 'Invalidation.Id' \
    --output text)

if [ -n "$INVALIDATION_ID" ]; then
    log_success "CloudFront invalidation created: $INVALIDATION_ID"
    log_info "Cache invalidation may take a few minutes to complete"
else
    log_warning "Failed to create CloudFront invalidation (non-fatal)"
fi

# Final summary
echo ""
log_success "===================================="
log_success "Deployment completed successfully! ðŸŽ‰"
log_success "===================================="
echo ""
log_info "Frontend URL: $FRONTEND_URL"
log_info "API URL: $API_URL"
log_info "S3 Bucket: $BUCKET_NAME"
log_info "CloudFront Distribution: $DISTRIBUTION_ID"
echo ""
log_info "Your application should be available in a few minutes."
log_info "Note: CloudFront cache invalidation may take up to 15 minutes."
echo ""
